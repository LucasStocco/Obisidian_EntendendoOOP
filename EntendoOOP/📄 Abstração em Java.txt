üìÑ Abstra√ß√£o em Java
1. O que √© Abstra√ß√£o?

A Abstra√ß√£o √© um dos quatro pilares da Programa√ß√£o Orientada a Objetos (POO).
Ela consiste em representar conceitos do mundo real em forma de classes, destacando apenas as caracter√≠sticas essenciais e ocultando os detalhes irrelevantes.

Em Java, a abstra√ß√£o √© usada para definir um modelo, sem precisar implementar todos os detalhes de imediato.

2. Como aplicar Abstra√ß√£o em Java?

Java oferece duas formas principais de implementar abstra√ß√£o:

Classes Abstratas

Definidas com a palavra-chave abstract.

Podem conter m√©todos abstratos (sem corpo) e m√©todos comuns.

N√£o podem ser instanciadas diretamente.

Servem de modelo para subclasses.

Interfaces

Definidas com a palavra-chave interface.

Definem apenas m√©todos sem implementa√ß√£o (at√© o Java 7).

A partir do Java 8, podem ter m√©todos default (com implementa√ß√£o) e est√°ticos.

S√£o como um contrato: a classe que ‚Äúassina‚Äù a interface deve implementar seus m√©todos.

3. Exemplo com Classe Abstrata
Classe Abstrata:
// Classe abstrata Animal
public abstract class Animal {
    private String nome;

    public Animal(String nome) {
        this.nome = nome;
    }

    public String getNome() {
        return nome;
    }

    // M√©todo abstrato (sem corpo, precisa ser implementado nas subclasses)
    public abstract void emitirSom();
}

Subclasses:
// Subclasse Cachorro
public class Cachorro extends Animal {
    public Cachorro(String nome) {
        super(nome);
    }

    @Override
    public void emitirSom() {
        System.out.println(getNome() + " late: Au Au!");
    }
}

// Subclasse Gato
public class Gato extends Animal {
    public Gato(String nome) {
        super(nome);
    }

    @Override
    public void emitirSom() {
        System.out.println(getNome() + " mia: Miau!");
    }
}

Classe Principal:
public class Main {
    public static void main(String[] args) {
        Animal dog = new Cachorro("Rex");
        Animal cat = new Gato("Mimi");

        dog.emitirSom(); // Rex late: Au Au!
        cat.emitirSom(); // Mimi mia: Miau!
    }
}


üîé Aqui, a classe abstrata Animal define o modelo (todos os animais devem emitirSom), mas quem decide o como s√£o as subclasses.

4. Exemplo com Interface
Interface:
public interface Veiculo {
    void acelerar();
    void frear();
}

Classes que implementam a interface:
public class Carro implements Veiculo {
    @Override
    public void acelerar() {
        System.out.println("O carro est√° acelerando...");
    }

    @Override
    public void frear() {
        System.out.println("O carro est√° freando...");
    }
}

public class Moto implements Veiculo {
    @Override
    public void acelerar() {
        System.out.println("A moto est√° acelerando...");
    }

    @Override
    public void frear() {
        System.out.println("A moto est√° freando...");
    }
}

Classe Principal:
public class Main {
    public static void main(String[] args) {
        Veiculo carro = new Carro();
        Veiculo moto = new Moto();

        carro.acelerar();
        carro.frear();

        moto.acelerar();
        moto.frear();
    }
}


üîé Aqui, Veiculo √© uma interface (um contrato). Tanto Carro quanto Moto s√£o obrigados a implementar os m√©todos definidos.

5. Resumindo

Abstra√ß√£o = focar no essencial e esconder detalhes desnecess√°rios.

Usada com:

Classes abstratas ‚Üí modelo + heran√ßa parcial.

Interfaces ‚Üí contratos de comportamento.

Ajuda a criar sistemas mais flex√≠veis, organizados e reutiliz√°veis.