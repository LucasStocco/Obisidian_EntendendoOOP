üìÑ Encapsulamento em Java
1. O que √© Encapsulamento?

Encapsulamento √© um dos pilares da Programa√ß√£o Orientada a Objetos (POO). Ele consiste em esconder os detalhes internos de uma classe e controlar o acesso aos atributos e m√©todos por meio de modificadores de acesso.

A ideia principal √© proteger os dados de acessos indevidos, garantindo que eles s√≥ possam ser manipulados de forma segura e controlada.

Benef√≠cios:

Maior seguran√ßa dos dados.

Controle sobre como os atributos s√£o modificados.

Facilidade de manuten√ß√£o do c√≥digo.

Possibilidade de aplicar regras de neg√≥cio no acesso ou altera√ß√£o de dados.

2. Modificadores de Acesso

Em Java, o encapsulamento √© implementado principalmente com os modificadores de acesso:

public ‚Üí acess√≠vel de qualquer lugar.

private ‚Üí acess√≠vel apenas dentro da pr√≥pria classe.

protected ‚Üí acess√≠vel dentro do mesmo pacote ou por subclasses.

(padr√£o) (sem modificador) ‚Üí acess√≠vel apenas dentro do mesmo pacote.

3. Como Implementar Encapsulamento em Java
Exemplo Pr√°tico:
// Classe Pessoa
public class Pessoa {
    // Atributos privados (n√£o podem ser acessados diretamente de fora da classe)
    private String nome;
    private int idade;

    // Construtor
    public Pessoa(String nome, int idade) {
        this.nome = nome;
        setIdade(idade); // usando o setter para validar
    }

    // Getter para nome
    public String getNome() {
        return nome;
    }

    // Setter para nome
    public void setNome(String nome) {
        this.nome = nome;
    }

    // Getter para idade
    public int getIdade() {
        return idade;
    }

    // Setter para idade com regra de neg√≥cio (valida√ß√£o)
    public void setIdade(int idade) {
        if (idade >= 0) {
            this.idade = idade;
        } else {
            System.out.println("Idade inv√°lida! Atribuindo valor padr√£o (0).");
            this.idade = 0;
        }
    }
}

Classe Principal para Testar:
public class Main {
    public static void main(String[] args) {
        Pessoa p1 = new Pessoa("Lucas", 20);

        // Acessando atributos de forma segura
        System.out.println("Nome: " + p1.getNome());
        System.out.println("Idade: " + p1.getIdade());

        // Alterando valores com valida√ß√£o
        p1.setIdade(-5); // n√£o ser√° permitido
        System.out.println("Idade atualizada: " + p1.getIdade());

        p1.setNome("Maria");
        System.out.println("Nome atualizado: " + p1.getNome());
    }
}

4. Resumindo:

Encapsulamento = prote√ß√£o + controle de acesso.

Atributos ‚Üí geralmente declarados como private.

Acesso ‚Üí feito por meio de getters e setters (m√©todos p√∫blicos).

Permite aplicar valida√ß√µes e regras no momento de acessar ou alterar os dados.