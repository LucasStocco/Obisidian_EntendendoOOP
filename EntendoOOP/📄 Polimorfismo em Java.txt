üìÑ Polimorfismo em Java
1. O que √© Polimorfismo?

Polimorfismo √© outro pilar da Programa√ß√£o Orientada a Objetos (POO).
A palavra vem do grego e significa ‚Äúmuitas formas‚Äù.

Na pr√°tica, o polimorfismo permite que um mesmo m√©todo tenha diferentes comportamentos, dependendo de qual objeto o chama.

Isso traz flexibilidade, reuso e extensibilidade ao c√≥digo.

2. Tipos de Polimorfismo em Java

Polimorfismo de Sobrescrita (Override ‚Äì tempo de execu√ß√£o):

Uma subclasse fornece sua pr√≥pria implementa√ß√£o de um m√©todo j√° definido na superclasse.

Usa a anota√ß√£o @Override.

Polimorfismo de Sobrecarga (Overload ‚Äì tempo de compila√ß√£o):

Uma classe possui m√©todos com o mesmo nome, mas com par√¢metros diferentes.

3. Exemplo de Polimorfismo por Sobrescrita (Override)
Classe Pai:
public class Animal {
    public void emitirSom() {
        System.out.println("O animal faz um som...");
    }
}

Classes Filhas:
public class Cachorro extends Animal {
    @Override
    public void emitirSom() {
        System.out.println("O cachorro late: Au Au!");
    }
}

public class Gato extends Animal {
    @Override
    public void emitirSom() {
        System.out.println("O gato mia: Miau!");
    }
}

Classe Principal:
public class Main {
    public static void main(String[] args) {
        Animal a1 = new Cachorro(); // Animal "se comporta" como cachorro
        Animal a2 = new Gato();     // Animal "se comporta" como gato

        a1.emitirSom(); // O cachorro late: Au Au!
        a2.emitirSom(); // O gato mia: Miau!
    }
}


üîé Aqui temos um mesmo m√©todo (emitirSom) sendo chamado de formas diferentes, dependendo do objeto real.

4. Exemplo de Polimorfismo por Sobrecarga (Overload)
public class Calculadora {
    // M√©todo para somar inteiros
    public int somar(int a, int b) {
        return a + b;
    }

    // M√©todo para somar tr√™s inteiros
    public int somar(int a, int b, int c) {
        return a + b + c;
    }

    // M√©todo para somar doubles
    public double somar(double a, double b) {
        return a + b;
    }
}

Classe Principal:
public class Main {
    public static void main(String[] args) {
        Calculadora calc = new Calculadora();

        System.out.println(calc.somar(2, 3));       // 5
        System.out.println(calc.somar(2, 3, 4));    // 9
        System.out.println(calc.somar(2.5, 3.7));   // 6.2
    }
}


üîé Aqui temos v√°rios m√©todos com o mesmo nome (somar), mas funcionando de maneiras diferentes dependendo dos par√¢metros.

5. Resumindo

Polimorfismo = um mesmo m√©todo pode ter comportamentos diferentes.

Dois tipos principais em Java:

Sobrescrita (Override): acontece na heran√ßa, em tempo de execu√ß√£o.

Sobrecarga (Overload): acontece na mesma classe, em tempo de compila√ß√£o.

Traz flexibilidade, reutiliza√ß√£o e clareza ao c√≥digo.